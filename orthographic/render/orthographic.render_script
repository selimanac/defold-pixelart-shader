local camera = require "orthographic.camera"
local pixelart_render = require("pixelart.pixelart_render")

camera.ORTHOGRAPHIC_RENDER_SCRIPT_USED = true

local CLEAR_COLOR = hash("clear_color")

local IDENTITY = vmath.matrix4()

function init(self)
	self.tile_pred = render.predicate({ "tile" })
	self.gui_pred = render.predicate({ "gui" })
	self.text_pred = render.predicate({ "debug_text" })
	self.particle_pred = render.predicate({ "particle" })
	self.model_pred = render.predicate({ "model" })

	self.clear_color = vmath.vector4(0, 0, 0, 0)
	self.clear_color.x = sys.get_config("render.clear_color_red", 0)
	self.clear_color.y = sys.get_config("render.clear_color_green", 0)
	self.clear_color.z = sys.get_config("render.clear_color_blue", 0)
	self.clear_color.w = sys.get_config("render.clear_color_alpha", 0)

	----------------------------------------------------------------
	--pixealart init
	pixelart_render.init(self)
	----------------------------------------------------------------
end

function update(self)
	-- clear color
	render.set_depth_mask(true)
	render.set_stencil_mask(0xff)
	render.clear({ [render.BUFFER_COLOR_BIT] = self.clear_color, [render.BUFFER_DEPTH_BIT] = 1, [render.BUFFER_STENCIL_BIT] = 0 })
	render.set_depth_mask(false)

	-- set default blend state
	render.enable_state(render.STATE_BLEND)
	render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)

	-- draw world per camera
	local cameras = camera.get_cameras()
	local frustum = nil
	local view = nil
	local proj = nil
	if #cameras > 0 then
		render.disable_state(render.STATE_DEPTH_TEST)
		render.disable_state(render.STATE_CULL_FACE)
		render.disable_state(render.STATE_STENCIL_TEST)
		for _, camera_id in ipairs(cameras) do
			local viewport = camera.get_viewport(camera_id)
			render.set_viewport(viewport.x, viewport.y, viewport.z, viewport.w)
			view = camera.get_view(camera_id)
			render.set_view(view)
			proj = camera.get_projection(camera_id)
			render.set_projection(proj)
			frustum = proj * view
			render.draw(self.tile_pred, { frustum = frustum })
			render.draw(self.particle_pred, { frustum = frustum })

			-- model predicate
			render.set_depth_mask(true)
			render.enable_state(graphics.STATE_DEPTH_TEST)
			render.draw(self.model_pred, { frustum = frustum })
			render.set_depth_mask(false)
			render.disable_state(render.STATE_DEPTH_TEST)

			render.draw_debug3d()

			----------------------------------------------------------------
			--pixealart pass
			pixelart_render.update(self, frustum, viewport.z, viewport.w)
			----------------------------------------------------------------
			-- if you have other predicates after pixelart_update(),  don't forget to reset the view and projection
			-- render.set_view(view)
			-- render.set_projection(proj)
		end
	end

	local window_width = render.get_window_width()
	local window_height = render.get_window_height()
	if window_width > 0 and window_height > 0 then
		-- draw gui in screen space using an orthographic projection
		render.disable_state(render.STATE_DEPTH_TEST)
		render.disable_state(render.STATE_CULL_FACE)
		render.enable_state(render.STATE_STENCIL_TEST)
		render.set_viewport(0, 0, window_width, window_height)
		view = IDENTITY
		render.set_view(view)
		proj = vmath.matrix4_orthographic(0, window_width, 0, window_height, -1, 1)
		render.set_projection(proj)
		frustum = proj * view
		render.draw(self.gui_pred, { frustum = frustum })
		render.draw(self.text_pred, { frustum = frustum })
		render.disable_state(render.STATE_STENCIL_TEST)
	end
end

function on_message(self, message_id, message)
	if message_id == CLEAR_COLOR then
		self.clear_color = message.color
	end
end
