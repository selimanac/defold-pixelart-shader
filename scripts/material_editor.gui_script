local models = require("scripts.models")

local slider_container = {}
local sliders_count = 0
local main_url = '/scripts#main'
local group_template_node
local slider_template_node
local right_container_node

local constants = {
	[1] = {
		pixel_size = {
			title = 'Pixel Size',
			value = vmath.vector4(),
			value_max = 10,
			value_min = 1,
			components = 1,
			component_labels = { 'Amount' },
			nodes = {},
			target = models.msg_update_pixel_constant
		},
	},
	[2] = {
		normal_edge_coefficient = {
			title = 'Normal Edge',
			value = vmath.vector4(),
			value_max = 1,
			value_min = 0.0,

			components = 1,
			component_labels = { 'Amount' },
			nodes = {},
			target = models.msg_update_pixel_constant
		},
	},
	[3] = {
		depth_edge_coefficient = {
			title = 'Depth Edge',
			value = vmath.vector4(),
			value_max = 0.5,
			value_min = 0.0,

			components = 1,
			component_labels = { 'Amount' },
			nodes = {},
			target = models.msg_update_pixel_constant
		},
	},
}

local function setup_components()
	local pos_y = -20
	local group_amount = 45
	local slider_amount = 25

	for constant_id, constant in ipairs(constants) do
		for constant_key, constant_value in pairs(constant) do
			local group_node = gui.clone_tree(group_template_node)
			constant_value.nodes = group_node

			gui.set_parent(group_node[hash('slider_group_template/container')], right_container_node, true)
			gui.set_position(constant_value.nodes[hash('slider_group_template/container')], vmath.vector3(-280.0, pos_y, 0))
			gui.set_text(constant_value.nodes[hash('slider_group_template/group_label')], constant_value.title)
			gui.set_enabled(constant_value.nodes[hash('slider_group_template/container')], true)

			constant_value.nodes['sliders'] = {}

			for slider_id = 1, constant_value.components do
				local slider = gui.clone_tree(slider_template_node)
				pos_y = pos_y + -slider_amount
				gui.set_parent(slider[hash('slider_template/container')], right_container_node, true)
				gui.set_position(slider[hash('slider_template/container')], vmath.vector3(-280.0, pos_y, 0))
				gui.set_text(slider[hash('slider_template/label')], constant_value.component_labels[slider_id])
				gui.set_enabled(slider[hash('slider_template/container')], true)
				table.insert(constant_value.nodes['sliders'], slider)
				sliders_count = sliders_count + 1
				local slider_temp = {
					constant_id = constant_id,
					constant_name = constant_key,
					slider_id = #constant_value.nodes['sliders'],
					slider_component = constant_value.component_labels[slider_id],
					handler_x = 0,
					handler_screen_position = gui.get_screen_position(slider[hash('slider_template/handle')]),
					handler_position = gui.get_position(slider[hash('slider_template/handle')]),
					node_proxy = slider[hash('slider_template/handle')],
					value_proxy = slider[hash('slider_template/value')]
				}
				table.insert(slider_container, slider_temp)
			end
		end
		pos_y = pos_y + -group_amount
	end
end

function init()
	msg.post(".", "acquire_input_focus")
	group_template_node = gui.get_node('slider_group_template/container')
	slider_template_node = gui.get_node('slider_template/container')
	right_container_node = gui.get_node('right_container')

	setup_components()
end

local function set_constant(constant_name, constant_value, target)
	msg.post(main_url, target, { constant_name = constant_name, constant_value = constant_value })
end

local function start_drag(handle, action_x)
	local target_x = (action_x - handle.handler_screen_position.x - 0.5)
	if target_x >= 0 and target_x <= 100 then
		gui.set_position(handle.node_proxy, vmath.vector3(target_x, handle.handler_position.y, handle.handler_position.z))

		local constant = constants[handle.constant_id][handle.constant_name]
		local value = 100 / constant.value_max
		local temp_value = target_x / value
		gui.set_text(handle.value_proxy, temp_value)

		if handle.slider_id == 1 then
			constant.value.x = temp_value
		elseif handle.slider_id == 2 then
			constant.value.y = temp_value
		elseif handle.slider_id == 3 then
			constant.value.z = temp_value
		end

		set_constant(handle.constant_name, constant.value, constant.target)
	end
end

local function set_default_values(values)
	for k, v in pairs(values) do
		for i = 1, sliders_count do
			local handle = slider_container[i]
			if slider_container[i].constant_name == k then
				local pos = 0
				local constant = constants[handle.constant_id][handle.constant_name]
				if handle.slider_id == 1 then
					pos = v.x
					constant.value.x = v.x
				elseif handle.slider_id == 2 then
					pos = v.y
					constant.value.y = v.y
				elseif handle.slider_id == 3 then
					pos = v.z
					constant.value.z = v.z
				end

				local value = 100 / constant.value_max

				gui.set_text(handle.value_proxy, string.sub(pos, 1, 3))
				pos = pos * value

				gui.set_position(handle.node_proxy, vmath.vector3(pos, handle.handler_position.y, handle.handler_position.z))
			end
		end
	end
end

function on_message(self, message_id, message, _)
	if message_id == models.msg_update_dafault_values then
		set_default_values(models.get_pixel_constants())
	end
end

function on_input(self, action_id, action)
	for i = 1, sliders_count do
		if action.released then
			models.is_updating = false
		end

		if gui.pick_node(slider_container[i].node_proxy, action.x, action.y) and action.repeated then
			models.is_updating = true
			start_drag(slider_container[i], action.x)
		end
	end
end
